#!/usr/bin/env perl

#hull形式を直接yaplot形式に変換する。

#-cで既存のpaletteファイルをあらかじめ読みこんでおくことができる。
#hull形式のファイルに含まれている色情報を追加したパレット情報を
 #hull2yap.colに出力する。このファイルはyaplotにてパレットデータとして
  #読みこむことができる。

$palette{"0 0 0"}=0;
$palette{"100 100 100"}=1;
$palette{"255 255 255"}=2;
$npalette=2;
while($#ARGV >=0 ){
    if($ARGV[0] eq "-c"){
	open(FILE,"<$ARGV[1]") || die "Cannot open file $ARGV[1]\n";
	while(<FILE>){		# 
	    @_ = split;
	    ($r,$g,$b)=@_;
	    $rgb="$r $g $b";
	    if($palette{$rgb} eq ""){
		$npalette++;
		$palette{$rgb}=$npalette;
		$pal[$npalette]=$rgb;
	    }
	}			# 
	close(FILE);
	shift(@ARGV);
    }elsif($ARGV[0]=="-h"){
	fprintf STDERR "usage: $0 [-c inputpalettefile] < infile.hull > outfile.yap\n";
	exit(1);
    }
    shift(@ARGV);
}

open(FILE,"> hull2yap.col");
for($i=0;$i<=$npalette;$i++){
    print FILE "$pal[$i]\n";
}
$lastpalette=-1;
$currentpalette=-1;
while(<STDIN>){
    s/#.*$//;
    @_ = split;
    next if($#_==0);
    ($r,$g,$b)=@_;
    $rgb="$r $g $b";
    if($palette{$rgb} eq ""){
	$npalette++;
	$palette{$rgb}=$npalette;
	$pal[$npalette]=$rgb;
	print FILE "$rgb\n";
    }
    $currentpalette=$palette{$rgb};
    if($lastpalette != $currentpalette){
	print "@ $currentpalette\n";
	$lastpalette=$currentpalette;
    }
#skip empty lines
    do{
	$_=<STDIN>;
	s/#.*$//;
    }while ($_ =~ /^ *$/);
    $n=0;
    $s="";
    while($_ !~ /^ *$/){
	($x,$y,$z)=split;
	$n++;
	#慣習的にx3dの座標は数字が大きい。
	#$x=(int($x/2+0.5+1000)-1000)/100;
	#$y=(int($y/2+0.5+1000)-1000)/100;
	#$z=(int($z/2+0.5+1000)-1000)/100;
	$s .= "$x $y $z ";
	$_=<STDIN>;
	s/#.*$//;
    }
    print "p $n $s\n";
}
print "\n";

close(FILE);
0;
